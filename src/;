#include "lametop.h"
#include <dirent.h>
#include <ncurses.h>
#include <string.h>
#include <unistd.h>

void	print_initial_frame(windows *table) {
	box(table->win_proc, 0, 0);
	box(table->win_cpu, 0, 0);
	box(table->win_mem, 0, 0);
	wprintw(table->win_cpu, "win_cpu");
	wprintw(table->win_proc, "win_proc");
	wprintw(table->win_mem, "win_mem");
	wrefresh(table->win_proc);
	wrefresh(table->win_cpu);
	wrefresh(table->win_mem);
	refresh();
}

int	win_orch(snapshot *file, windows *wind, int *cpu_usage) {
	windows	*table;
	int		*res;

	initscr();
	clear();
	refresh();
	noecho();
	cbreak();
	keypad(stdscr, TRUE);

	if (!file || !wind) {
		error_log("error with win_orch params\n");
		return (1);
	}
	table = tables(wind);
	print_frame(table, file, *cpu_usage);
	endwin();
	return (0);
}

windows	*tables(windows *win_frame) {
	int		cols_mid;
	int		lins_mid;
	WINDOW	*win_mem;
	WINDOW	*win_cpu;
	WINDOW	*win_proc;

	if (LINES < 12 || COLS < 4) {
		error_log("tables: terminal size too small\n");
		return (0);
	}
	cols_mid = (COLS / 2);
	lins_mid = (LINES / 2);
	win_mem = newwin(10, cols_mid, 0, 0);
	win_cpu = newwin(10, cols_mid, 0, cols_mid);
	win_proc = newwin(LINES - 11, COLS, 10, 0);
	if (!win_mem || !win_cpu || !win_proc) {
		error_log("tables: window creation failed\n");
		return (0);
	}
	win_frame->win_mem = win_mem;
	win_frame->win_cpu = win_cpu;
	win_frame->win_proc = win_proc;
	return (win_frame);
}

void	cpu_usage_widget(unsigned int usage, WINDOW *win_cpu) {
	int	i;
	int	MaxBarWidth;
	int	BarLength;
	int	x;
	int	y;
	i = 0;
	int width, height;
	getmaxyx(win_cpu, height, width);
	MaxBarWidth = 30;
	BarLength = (usage * MaxBarWidth) / 100;
	x = 2;
	y = 2;
	wrefresh(win_cpu);
	mvwprintw(win_cpu, x, i+1, "%c", '|');
	while (i < MaxBarWidth) {
		/*
		if(i == 1) {
			mvwprintw(win_cpu, x, i, "%c", '[');
			i++;
		}
		*/
		if (i < BarLength) {
			mvwprintw(win_cpu, x, i+1, "%c", '|');
		}
		wrefresh(win_cpu);
		i++;
	}
	i++;
	//mvwprintw(win_cpu, x, i, "%c", ']');
	wrefresh(win_cpu);
}

void	print_frame(windows *frame, snapshot *file, unsigned int usage) {
	print_initial_frame(frame);
	int			ch;
	snapshot	*file_tmp;
	pid_values	*process;
	int			i;
	if (!file || !frame) {
		error_log("print_frame: linked list null");
		return;
	}
	if (!frame->win_proc || !frame->win_cpu || !frame->win_mem) {
		error_log("print_frame: frame elements null");
		return ;
	}
	file_tmp = file;
	i = 0;
	while (file_tmp->next) {
		file_tmp = file_tmp->next;
		cpu_usage_widget(usage, frame->win_cpu);
		i++;
	}
	while (((ch = getch()) != KEY_F(1)) && ch != 'q') {
		refresh();
	}
}
